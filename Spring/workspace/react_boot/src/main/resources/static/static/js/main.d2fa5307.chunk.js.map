{"version":3,"sources":["components/TodoListTemplate.js","actions/index.js","components/Form.js","components/TodoItem.js","components/TodoItemList.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["TodoListTemplate","form","children","className","process","apiUrl","Form","state","todo","handleChange","e","setState","target","value","handleCreate","props","addTodo","text","checked","handleKeyPress","key","this","onChange","onKeyPress","onClick","Component","connect","dispatch","axios","post","then","res","type","payload","data","catch","error","console","log","TodoItem","handleRemove","id","removeTodo","handleToggle","toggleTodo","nextProps","nextState","todoText","stopPropagation","delete","put","TodoItemList","fetchAllTodos","todoList","todos","map","get","err","App","Boolean","window","location","hostname","match","initialState","check","store","createStore","action","Object","assign","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d2fa5307.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoListTemplate.css';\r\n\r\n// function TodoListTemplate(props) {\r\nconst TodoListTemplate = ({ form, children }) => {\r\n\r\n    return (\r\n        <div className=\"todo-list-template\">\r\n            <div className=\"title\">\r\n                TO DO LIST ({process.env.REACT_APP_TITLE})\r\n            </div>\r\n            <div className=\"form-wrapper\">\r\n                {form}\r\n            </div>\r\n            <div className=\"todos-wrapper\">\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoListTemplate;","//Action type 정의\r\nimport axios from 'axios';\r\n// export const FETCH_TODOS = \"FETCH_TODOS\";\r\n// export const ADD_TODO = \"ADD_TODO\";\r\n// export const REMOVE_TODO = \"REMOVE_TODO\";\r\n// export const TOGGLE_TODO = \"TOGGLE_TODO\";\r\n\r\n\r\n\r\n\r\n//Server URL\r\nconst apiUrl = process.env.REACT_APP_APIURL;\r\n//'http://localhost:8083/todos';\r\n\r\n\r\n// Action 생성함수 선언 - 목록 조회\r\nexport const FETCH_TODOS = \"FETCH_TODOS\";\r\n\r\n// 1. Todo 목록\r\nexport const fetchAllTodos = () => {\r\n    //redux-thunk 미들웨어\r\n    //객체 대신 함수를 생성하는 액션 생성 함수를 작성할 수 있게 해준다.\r\n    return (dispatch) => {\r\n        axios.get(apiUrl)\r\n            //정상 실행\r\n            .then(res => {\r\n                dispatch({\r\n                    //요청이 성공하면, 서버 응답 내용을 payload로 설정하여\r\n                    // FETCH_TODOS 액션을 dispatch 한다.\r\n                    type: FETCH_TODOS,\r\n                    payload: res.data\r\n                })\r\n            })\r\n\r\n            //에러 발생\r\n            .catch(err => {\r\n                console.error(err);\r\n                throw (err);\r\n            });\r\n    }\r\n};\r\n\r\n// Action 생성함수 선언 - 목록 추가\r\nexport const ADD_TODO = \"ADD_TODO\";\r\n\r\n//2. Todo 등록\r\nexport const addTodo = (todo) => {\r\n    return (dispatch) => {\r\n        axios.post(apiUrl, todo)\r\n            .then(res => {\r\n                dispatch({\r\n                    type: ADD_TODO,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw (error);\r\n            })\r\n    }\r\n}\r\n\r\n// Action 생성함수 선언 - 목록 제거\r\nexport const REMOVE_TODO = \"REMOVE_TODO\";\r\n\r\n//2. Todo 등록\r\nexport const removeTodo = (id) => {\r\n    return (dispatch) => {\r\n        axios.delete(`${apiUrl}/${id}`)\r\n            .then(res => {\r\n                dispatch({\r\n                    type: REMOVE_TODO,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw (error);\r\n            })\r\n    }\r\n}\r\n\r\n// Action 생성함수 선언 - 목록 제거\r\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\r\n\r\n//2. Todo 등록\r\nexport const toggleTodo = (todo) => {\r\n    return (dispatch) => {\r\n        axios.put(`${apiUrl}/${todo.id}`, todo)\r\n            .then(res => {\r\n                dispatch({\r\n                    type: TOGGLE_TODO,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw (error);\r\n            })\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './Form.css';\r\nimport { addTodo } from '../actions';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Form extends Component {\r\n\r\n    state = {\r\n        todo:''\r\n    };\r\n\r\n    //Event Handler 함수 정의\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            todo: e.target.value\r\n        })\r\n    };\r\n\r\n    handleCreate = () => {\r\n        const {todo} = this.state;\r\n        //Action 생성 함수 호출\r\n        this.props.addTodo({\r\n            text: todo,\r\n            checked: false\r\n        });\r\n        this.setState({\r\n            todo: ''\r\n\r\n        })\r\n    };\r\n\r\n    handleKeyPress = (e) => {\r\n        if (e.key === 'Enter') {\r\n            this.handleCreate();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {todo} = this.state;\r\n        const {handleChange, handleCreate, handleKeyPress} = this;\r\n        return (\r\n            <div className=\"form\">\r\n                <input value={todo} onChange={handleChange} onKeyPress={handleKeyPress} />\r\n                <div className=\"create-button\" onClick={handleCreate}>\r\n                    추가\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, {addTodo})(Form);","import React, { Component } from 'react';\r\nimport './TodoItem.css'\r\nimport './Form.css';\r\nimport { connect } from 'react-redux';\r\nimport { removeTodo, toggleTodo } from '../actions';\r\n\r\nclass TodoItem extends Component {\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.checked !== nextProps.checked;\r\n    }\r\n\r\n    handleRemove = (id) => {\r\n        //Action 생성함수 호출\r\n        this.props.removeTodo(id);\r\n    }\r\n\r\n    handleToggle = (todo) => {\r\n        //Action 생성함수 호출\r\n        this.props.toggleTodo(todo);\r\n    }\r\n\r\n    render() {\r\n        const { todoText, checked, id } = this.props;\r\n        return (\r\n            <div className=\"todo-item\" onClick={() => {\r\n                const todo = { id, text:todoText, checked };\r\n                todo.checked = !todo.checked\r\n                this.handleToggle(todo);\r\n            }}>\r\n                <div className=\"remove\" onClick={(e) => {\r\n                    // bouble up(event 전파) 방지하기 위해 stopPropagation 선언\r\n                    // 즉, 다른 remove 에서만 해당 이벤트가 작동되게 하기 위함이다.\r\n                    e.stopPropagation();\r\n                    this.handleRemove(id);\r\n\r\n                }}>&times;\r\n                {/* &times : x 표시 */}\r\n                </div>\r\n\r\n                {/* ${checked} 값이 true 인 경우 list line-through 진행 \r\n                 `을 이용해서 작성한다.abs]*/}\r\n                <div className={`.todo-text ${checked && 'checked'}`}>\r\n\r\n                    {/* checked 가 true인 경우 아래와 같이 진행  */}\r\n                    {/* <div className={\".todo-text && checked\"}> */}\r\n                    <div>{todoText}</div>\r\n                </div>\r\n                {\r\n                    checked && (<div className=\"check-mark\">✓</div>)\r\n                }\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default connect(null, { removeTodo, toggleTodo})(TodoItem);","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport { connect } from 'react-redux';\r\nimport { fetchAllTodos } from '../actions';\r\n\r\nclass TodoItemList extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.fetchAllTodos();\r\n    }\r\n\r\n    //life-cycle 메서드 overriding : render() 메서드의 호출을 줄일 수 있다.\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     return this.props.todos !== nextProps.todos;\r\n    // }\r\n\r\n    render() {\r\n        const {todos} = this.props;\r\n        const todoList = todos.map(({ id, text, checked }) => (\r\n            <TodoItem id={id} \r\n                    checked={checked}\r\n                    todoText={text} \r\n                    key={id} />\r\n        ));\r\n        return (\r\n            <div>\r\n                {todoList}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        todos: state.todos\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, { fetchAllTodos })(TodoItemList);","import React, { Component } from 'react';\nimport TodoListTemplate from './components/TodoListTemplate';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\n\n  \nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n        <TodoListTemplate form={<Form />}>\n          <TodoItemList />\n        </TodoListTemplate>\n\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { FETCH_TODOS, ADD_TODO, REMOVE_TODO, TOGGLE_TODO } from '../actions';\r\n\r\nconst initialState = {\r\n    todos: [{\r\n        id: 0,\r\n        text: '',\r\n        check: false\r\n    }]\r\n}\r\n\r\n// reducer 함수\r\nexport const todoReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_TODOS:\r\n        case ADD_TODO:\r\n        case REMOVE_TODO:\r\n        case TOGGLE_TODO:\r\n            return Object.assign({}, state, { todos: action.payload })\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { todoReducer } from './reducers';\n\nimport { createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n\nconst store = createStore(todoReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n  \n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}